#!/usr/bin/make -f

# enable verbose build messages
export DH_VERBOSE=1

# enable all build hardening flags
export DEB_BUILD_MAINT_OPTIONS=hardening=+all

# indicate that binary targets do not require root
export DEB_RULES_REQUIRES_ROOT=no

# use system LLVM via unbundling
export AR=llvm-ar-6.0
export NM=llvm-nm-6.0
export CC=clang-6.0
export CXX=clang++-6.0

# more verbose linker output
export LDFLAGS+=-Wl,--stats

# extra flags to reduce warnings that aren't very useful
export CXXFLAGS+=-Wno-unused-function \
                 -Wno-unused-variable \
                 -Wno-deprecated-declarations \

# ignore warnings for minor mistakes that are too common
export CXXFLAGS+=-Wno-return-type \
                 -Wno-misleading-indentation \

# set the appropriate cpu architecture
DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq (i386,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x86\"
endif
ifeq (amd64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x64\"
endif
ifeq (arm64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm64\"
endif
ifeq (armhf,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm\" arm_use_neon=false
endif

# add gn flags from config bundle
defines+=$(shell debian/get_gnargs_shell config_bundles/$(shell cat debian/ungoogled-config-bundle))

# some notes about embedded libraries
#  can't use system nss since net/third_party/nss is heavily patched
#  can't use system ots (open text *summarizer*) since that's not google's ots (open text *sanitizer*)

# handle parallel build options
njobs=1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
njobs=$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# paths to files needed by flot
flotpaths=/usr/share/javascript/jquery/*min.js \
          /usr/share/javascript/jquery-flot/*min.js \

%:
	dh $@

out/Default/gn:
	mkdir -p out/Default || true
	./tools/gn/bootstrap/bootstrap.py -o out/Default/gn -s -j$(njobs)

override_dh_quilt_patch:
	pushd debian/scripts/ungoogled-chromium
	python3 -m buildkit patches export -b config_bundles/$(cat ungoogled-config-bundle) ../../patches/
	python3 -m buildkit prune -b config_bundles/$(cat ungoogled-config-bundle) ../../../
	python3 -m buildkit domains apply -b config_bundles/$(cat ungoogled-config-bundle) -c domsubcache.tar.gz ../../../
	popd
	dh_quilt_patch

override_dh_quilt_unpatch:
	pushd debian/ungoogled-chromium
	python3 -m buildkit domains revert -c domsubcache.tar.gz ../../../
	popd
	dh_quilt_unpatch

override_dh_auto_configure:
	# output compiler information
	$(CXX) --version
	# use system flot
	for file in $(flotpaths); do ln -sf $$file third_party/flot; done
	# put yasm script in the location expected by gn
	ln -sf ../pdfium/third_party/yasm/run_yasm.py third_party/yasm
	# strip out system third_party libraries
	./debian/scripts/unbundle

override_dh_auto_build-arch: out/Default/gn
	./out/Default/gn gen out/Default --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Default chrome chrome_sandbox content_shell chromedriver

override_dh_auto_build-indep: out/Default/gn
	./out/Default/gn gen out/Default --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Default packed_resources

override_dh_auto_install-arch:
	cp out/Default/chrome out/Default/chromium
	cp out/Default/content_shell out/Default/chromium-shell
	cp out/Default/chrome_sandbox out/Default/chrome-sandbox
	cp out/Default/locales/en-US.pak out/Default/resources
	chmod 4755 out/Default/chrome-sandbox # suid sandbox
	sed -e s/@@PACKAGE@@/chromium/g -e s/@@MENUNAME@@/Chromium/g \
	    < chrome/app/resources/manpage.1.in > out/Default/chromium.1
	dh_auto_install
	# create /etc/chromium.d README file
	echo "Any files placed in this directory will be sourced prior to executing chromium." \
	    > debian/ungoogled-chromium/etc/chromium.d/README
	# update launcher script with build information
	sed 's|@BUILD_DIST@|$(shell printf "%s %s/%s" $(shell lsb_release -si) $(shell lsb_release -sc) $(shell lsb_release -sr))|' \
	    < debian/scripts/chromium > debian/ungoogled-chromium/usr/bin/chromium
	# move icons into /usr/share
	./debian/scripts/icons

override_dh_auto_install-indep:
	rm -f out/Default/locales/en-US.pak
	dh_auto_install

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_strip:
	dh_strip --no-automatic-dbgsym # Do not build any debug packages

override_dh_gencontrol:
	dh_gencontrol -- -VBuilt-Using="$(shell dpkg-query -f '$${source:Package} (= $${source:Version}), ' -W libjs-jquery libjs-jquery-flot)"

override_dh_auto_clean:
	rm -rf out
	find . -name \*.pyc -execdir rm -f {} \;
	dh_auto_clean
